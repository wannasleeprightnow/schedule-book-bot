"""empty message

Revision ID: 4cff02ab96cb
Revises: 
Create Date: 2025-08-07 11:41:19.128053

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4cff02ab96cb'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('grade',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('number', sa.Integer(), nullable=True),
    sa.Column('letter', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_grade')),
    sa.UniqueConstraint('id', name=op.f('uq_grade_id'))
    )
    op.create_table('lesson',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('correct_name', sa.String(), nullable=False),
    sa.Column('input_name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_lesson')),
    sa.UniqueConstraint('id', name=op.f('uq_lesson_id'))
    )
    op.create_table('schedule',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('lessons', sa.String(), nullable=False),
    sa.Column('lessons_date', sa.Date(), nullable=True),
    sa.Column('grade_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['grade_id'], ['grade.id'], name=op.f('fk_schedule_grade_id_grade'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_schedule')),
    sa.UniqueConstraint('id', name=op.f('uq_schedule_id'))
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('telegram_id', sa.Integer(), nullable=False),
    sa.Column('telegram_username', sa.String(), nullable=False),
    sa.Column('notice_time', sa.String(), nullable=True),
    sa.Column('grade_id', sa.Integer(), nullable=True),
    sa.Column('deskmate_username', sa.String(), nullable=True),
    sa.Column('deskmate_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['deskmate_id'], ['user.id'], name=op.f('fk_user_deskmate_id_user'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['grade_id'], ['grade.id'], name=op.f('fk_user_grade_id_grade'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user')),
    sa.UniqueConstraint('id', name=op.f('uq_user_id'))
    )
    op.create_table('divided_books',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_deskmate_books', sa.String(), nullable=True),
    sa.Column('second_deskmate_books', sa.String(), nullable=True),
    sa.Column('first_deskmate_id', sa.Integer(), nullable=False),
    sa.Column('second_deskmate_id', sa.Integer(), nullable=False),
    sa.Column('schedule_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['first_deskmate_id'], ['user.id'], name=op.f('fk_divided_books_first_deskmate_id_user'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['schedule_id'], ['schedule.id'], name=op.f('fk_divided_books_schedule_id_schedule'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['second_deskmate_id'], ['user.id'], name=op.f('fk_divided_books_second_deskmate_id_user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_divided_books')),
    sa.UniqueConstraint('id', name=op.f('uq_divided_books_id'))
    )
    lessons = [
        ("Русский язык", "рус язык"),
        ("Литература", "литература"),
        ("Алгебра", "алгебра"),
        ("Физика", "физика"),
        ("Геометрия", "геометрия"),
        ("Физкультура", "физкультура"),
        ("Информатика", "информатика"),
        ("Информатика", "информат"),
        ("Информатика", "информ"),
        ("Химия", "химия"),
        ("Биология", "биология"),
        ("ОБЖ", "ОБЖ"),
        ("История", "история"),
        ("Английский язык", "англ язык"),
        ("Английский язык", "англ яз"),
        ("Английский язык", "англязык"),
        ("Английский язык", "англяз"),
        ("Английский язык", "англ язык "),
        ("Обществознание", "обществозн"),
        ("Обществознание", "обществознание"),
        ("ИЗО", "ИЗО"),
        ("География", "география"),
        ("Математика", "математика"),
        ("ЭК Финансовая грамотность", "ЭК фин грам"),
        ("ЭК Геометрия", "ЭК геометрия"),
        ("ЭК Право", "ЭК право"),
        ("ЭК Биохимия", "ЭК биохимия"),
        ("ЭК Математика", "ЭК матем"),
        ("ЭК Математика", "ЭК математика"),
        ("ЭК Информатика", "ЭК инф гр"),
        ("ЭК Информатика", "ЭК инф  гр"),
        ("ЭК Русский язык", "ЭК рус язык"),
        ("ЭК Физика/ЭК Математика", "ЭК физ/ ЭК матем"),
        ("КВ Русский язык", "КВ рус язык"),
        ("КВ Русский язык", "КВ рус  язык"),
        ("Информатика/Английский язык", "инф/англ К"),
        ("Информатика/Английский язык", "инф/англФ"),
        ("Информатика/Английский язык", "инф  /англФ"),
        ("Информатика/Английский язык", "инф/англ"),
        ("Английский язык/Информатика", "англАк /инф"),
        ("Английский язык/Информатика", "англ /инф"),
        ("Английский язык/Экономика", "англ /эконом"),
        ("Информатика/Физкультура", "инф /ф  ра Бел"),
        ("Информатика/Физкультура", "инф /ф  ра Бас"),
        ("Физкультура/Информатика", "фра Бас/инф"),
        ("Физкультура/Информатика", "фра Бел /инф"),
        ("Физкультура/Информатика", "фра Бел/инф"),
        ("Проф. минимум", "профминимум"),
        ("Вероятность и статистика", "вер и стат"),
        ("Вероятность и статистика", "вер  и стат"),
        ("Индивидуальный проект", "инд проект"),
        ("Технология", "технология"),
        ("Экономика", "экономика"),
        ("Музыка", "музыка"),
        ("Разговоры о важном", "Разговоры о важном"),
        ("?", "?"),
    ]
    for correct_name, input_name in lessons:
        op.execute(
            sa.text("""
                INSERT INTO lesson (correct_name, input_name)
                SELECT :correct_name, :input_name
                WHERE NOT EXISTS (
                    SELECT 1 FROM lesson WHERE correct_name=:correct_name AND input_name=:input_name
                )
            """).bindparams(correct_name=correct_name, input_name=input_name)
        )

    grades = [
        (7, "А"), (7, "Б"), (7, "В"), (7, "Г"), (7, "Д"),
        (8, "А"), (8, "Б"), (8, "В"), (8, "Г"),
        (9, "А"), (9, "Б"), (9, "В"), (9, "Г"),
        (10, "А"), (10, "Б"), (10, "В"), (10, "Г"),
        (11, "А"), (11, "Б"), (11, "В"), (11, "Г"), (11, "Д"),
    ]
    for number, letter in grades:
        op.execute(
            sa.text("""
                INSERT INTO grade (number, letter)
                SELECT :number, :letter
                WHERE NOT EXISTS (
                    SELECT 1 FROM grade WHERE number=:number AND letter=:letter
                )
            """).bindparams(number=number, letter=letter)
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('divided_books')
    op.drop_table('user')
    op.drop_table('schedule')
    op.drop_table('lesson')
    op.drop_table('grade')
    # ### end Alembic commands ###
